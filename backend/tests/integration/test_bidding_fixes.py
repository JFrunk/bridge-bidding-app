#!/usr/bin/env python3
"""
Test script to verify bidding fixes for:
1. North's weak 2H with Q-J-8-6-2 (lacks 2 of top 3 honors) should be rejected
2. West's 19 HCP should bid 3NT over competitive auction 2‚ô•-Pass-3‚ô•
"""

from engine.hand import Hand, Card
from engine.bidding_engine import BiddingEngine
from engine.ai.feature_extractor import extract_features

def create_test_hands():
    """Create the hands from the problematic auction."""

    # North: ‚ô†AJ5 ‚ô•QJ862 ‚ô¶J965 ‚ô£‚Äî (void in clubs)
    north_cards = [
        Card('A', '‚ô†'), Card('J', '‚ô†'), Card('5', '‚ô†'),
        Card('Q', '‚ô•'), Card('J', '‚ô•'), Card('8', '‚ô•'), Card('6', '‚ô•'), Card('5', '‚ô•'), Card('2', '‚ô•'),
        Card('J', '‚ô¶'), Card('9', '‚ô¶'), Card('6', '‚ô¶'), Card('5', '‚ô¶'),
    ]
    north = Hand(north_cards)

    # East: ‚ô†T63 ‚ô•94 ‚ô¶Q3 ‚ô£JT9532
    east_cards = [
        Card('T', '‚ô†'), Card('6', '‚ô†'), Card('3', '‚ô†'),
        Card('9', '‚ô•'), Card('4', '‚ô•'),
        Card('Q', '‚ô¶'), Card('3', '‚ô¶'),
        Card('J', '‚ô£'), Card('T', '‚ô£'), Card('9', '‚ô£'), Card('5', '‚ô£'), Card('3', '‚ô£'), Card('2', '‚ô£'),
    ]
    east = Hand(east_cards)

    # South: ‚ô†K74 ‚ô•K103 ‚ô¶8742 ‚ô£K84
    south_cards = [
        Card('K', '‚ô†'), Card('7', '‚ô†'), Card('4', '‚ô†'),
        Card('K', '‚ô•'), Card('T', '‚ô•'), Card('3', '‚ô•'),
        Card('8', '‚ô¶'), Card('7', '‚ô¶'), Card('4', '‚ô¶'), Card('2', '‚ô¶'),
        Card('K', '‚ô£'), Card('8', '‚ô£'), Card('4', '‚ô£'),
    ]
    south = Hand(south_cards)

    # West: ‚ô†Q982 ‚ô•A7 ‚ô¶AKT ‚ô£AQ76 (19 HCP balanced)
    west_cards = [
        Card('Q', '‚ô†'), Card('9', '‚ô†'), Card('8', '‚ô†'), Card('2', '‚ô†'),
        Card('A', '‚ô•'), Card('7', '‚ô•'),
        Card('A', '‚ô¶'), Card('K', '‚ô¶'), Card('T', '‚ô¶'),
        Card('A', '‚ô£'), Card('Q', '‚ô£'), Card('7', '‚ô£'), Card('6', '‚ô£'),
    ]
    west = Hand(west_cards)

    return {
        'North': north,
        'East': east,
        'South': south,
        'West': west
    }

def test_north_opening():
    """Test that North does NOT open 2H with Q-J-8-6-2 (lacks 2 of top 3 honors)."""
    print("=" * 60)
    print("TEST 1: North's opening bid (should NOT be 2‚ô•)")
    print("=" * 60)

    hands = create_test_hands()
    north = hands['North']

    print(f"North's hand: 9 HCP, 6 hearts (Q-J-8-6-2), VOID in clubs")
    print(f"  ‚ô†: {north.suit_lengths['‚ô†']} cards, {north.suit_hcp['‚ô†']} HCP")
    print(f"  ‚ô•: {north.suit_lengths['‚ô•']} cards, {north.suit_hcp['‚ô•']} HCP (Q-J only)")
    print(f"  ‚ô¶: {north.suit_lengths['‚ô¶']} cards, {north.suit_hcp['‚ô¶']} HCP")
    print(f"  ‚ô£: {north.suit_lengths['‚ô£']} cards, {north.suit_hcp['‚ô£']} HCP (VOID!)")
    print(f"\nSAYC Weak Two requirements:")
    print(f"  - 2 of top 3 honors (A/K/Q): ‚ùå FAIL (only Q-J)")
    print(f"  - No void: ‚ùå FAIL (void in clubs)")
    print()

    engine = BiddingEngine()
    auction_history = []

    bid, explanation = engine.get_next_bid(
        hand=north,
        auction_history=auction_history,
        my_position='North',
        vulnerability='None'
    )
    print(f"North's bid: {bid}")
    print(f"Explanation: {explanation}")
    print()

    if bid == "2‚ô•":
        print("‚ùå FAIL: North incorrectly opened 2‚ô• without 2 of top 3 honors!")
        print("   SAYC requires A-K, A-Q, or K-Q in the suit for a Weak Two")
        return False
    elif bid == "Pass":
        print("‚úÖ PASS: North correctly passed (insufficient suit quality)")
        return True
    elif bid == "1‚ô•":
        print("‚ö†Ô∏è  BORDERLINE: North opened 1‚ô• (acceptable with 9 HCP and 6-card suit)")
        return True
    else:
        print(f"‚ö†Ô∏è  UNEXPECTED: North bid {bid}")
        return False

def test_west_overcall():
    """Test that West bids 3NT with 19 HCP over competitive auction 2‚ô•-Pass-3‚ô•."""
    print("=" * 60)
    print("TEST 2: West's bid after 2‚ô• - Pass - 3‚ô•")
    print("=" * 60)

    hands = create_test_hands()
    west = hands['West']

    print(f"West's hand: 19 HCP, balanced, A-7 in hearts (stopper)")
    print(f"  ‚ô†: {west.suit_lengths['‚ô†']} cards, {west.suit_hcp['‚ô†']} HCP")
    print(f"  ‚ô•: {west.suit_lengths['‚ô•']} cards, {west.suit_hcp['‚ô•']} HCP (A-7 stopper)")
    print(f"  ‚ô¶: {west.suit_lengths['‚ô¶']} cards, {west.suit_hcp['‚ô¶']} HCP")
    print(f"  ‚ô£: {west.suit_lengths['‚ô£']} cards, {west.suit_hcp['‚ô£']} HCP")
    print(f"  Balanced: {west.is_balanced}")
    print()

    # Simulate auction: 2‚ô• - Pass - 3‚ô• - ? (West already passed once)
    engine = BiddingEngine()
    auction_history = ['2‚ô•', 'Pass', '3‚ô•', 'Pass']  # West passed after 2‚ô•

    bid, explanation = engine.get_next_bid(
        hand=west,
        auction_history=auction_history,
        my_position='West',
        vulnerability='EW'
    )
    print(f"West's bid: {bid}")
    print(f"Explanation: {explanation}")
    print()

    if bid == "Pass":
        print("‚ùå FAIL: West passed with 19 HCP - should compete!")
        print("   With balanced 19 HCP and stopper, West should bid 3NT or Double")
        return False
    elif bid == "3NT":
        print("‚úÖ PASS: West correctly bid 3NT (showing 18-21 HCP over competitive auction)")
        return True
    elif bid == "X":
        print("‚úÖ ACCEPTABLE: West doubled (showing 19+ HCP, planning to bid NT)")
        return True
    else:
        print(f"‚ö†Ô∏è  UNEXPECTED: West bid {bid} (expected 3NT or Double)")
        return bid != "Pass"  # Any bid is better than Pass

def main():
    print("\n" + "=" * 60)
    print("TESTING BIDDING FIXES")
    print("=" * 60)
    print()

    test1_passed = test_north_opening()
    print()

    test2_passed = test_west_overcall()
    print()

    print("=" * 60)
    print("SUMMARY")
    print("=" * 60)
    print(f"Test 1 (North's opening): {'‚úÖ PASS' if test1_passed else '‚ùå FAIL'}")
    print(f"Test 2 (West's overcall): {'‚úÖ PASS' if test2_passed else '‚ùå FAIL'}")
    print()

    if test1_passed and test2_passed:
        print("üéâ All tests passed!")
        return 0
    else:
        print("‚ö†Ô∏è  Some tests failed - review needed")
        return 1

if __name__ == "__main__":
    exit(main())
