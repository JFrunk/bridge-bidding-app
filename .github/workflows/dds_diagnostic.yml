name: DDS Diagnostic Test

on:
  workflow_dispatch:  # Manual trigger only

jobs:
  diagnose:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Step 1 - Check endplay installation
        run: |
          echo "=== Checking if endplay is installed ==="
          pip list | grep endplay || echo "❌ endplay not found in pip list"

          echo ""
          echo "=== Trying to import endplay ==="
          python3 -c "import endplay; print(f'✅ endplay version: {endplay.__version__}')" || echo "❌ Failed to import endplay"

      - name: Step 2 - Test endplay functionality
        run: |
          echo "=== Testing endplay.types ==="
          python3 -c "from endplay.types import Deal, Player, Denom; print('✅ endplay.types imported')" || echo "❌ Failed"

          echo ""
          echo "=== Testing endplay.dds ==="
          python3 -c "from endplay.dds import calc_dd_table; print('✅ endplay.dds imported')" || echo "❌ Failed"

      - name: Step 3 - Check our DDS module (from root)
        run: |
          echo "=== Testing from project root ==="
          python3 -c "import sys; sys.path.insert(0, 'backend'); from engine.play.ai.dds_ai import DDS_AVAILABLE; print(f'DDS_AVAILABLE from root: {DDS_AVAILABLE}')" || echo "❌ Failed"

      - name: Step 4 - Check our DDS module (from backend)
        run: |
          echo "=== Testing from backend directory ==="
          cd backend
          python3 -c "from engine.play.ai.dds_ai import DDS_AVAILABLE; print(f'DDS_AVAILABLE from backend: {DDS_AVAILABLE}')" || echo "❌ Failed"

      - name: Step 5 - Try to create DDS AI instance
        run: |
          echo "=== Attempting to create DDSPlayAI instance ==="
          cd backend
          python3 -c "
from engine.play.ai.dds_ai import DDSPlayAI, DDS_AVAILABLE
print(f'DDS_AVAILABLE: {DDS_AVAILABLE}')
if DDS_AVAILABLE:
    try:
        ai = DDSPlayAI()
        print(f'✅ Created DDSPlayAI: {ai.get_name()}')
    except Exception as e:
        print(f'❌ Failed to create DDSPlayAI: {e}')
else:
    print('❌ DDS not available - cannot create instance')
" || echo "❌ Script failed"

      - name: Step 6 - Check platform info
        run: |
          echo "=== Platform Information ==="
          python3 -c "import platform; print(f'System: {platform.system()}'); print(f'Platform: {platform.platform()}'); print(f'Machine: {platform.machine()}')"

      - name: Step 7 - Run minimal test
        run: |
          echo "=== Running test with 1 hand ==="
          cd backend
          python3 test_play_quality_integrated.py --hands 1 --ai dds || {
            echo "❌ Test failed"
            echo "Trying with minimax to verify test script works..."
            python3 test_play_quality_integrated.py --hands 1 --ai minimax && echo "✅ Minimax works - issue is DDS only"
          }

      - name: Summary
        if: always()
        run: |
          echo ""
          echo "=========================================="
          echo "DIAGNOSTIC COMPLETE"
          echo "=========================================="
          echo "Check the logs above to see where DDS fails"
